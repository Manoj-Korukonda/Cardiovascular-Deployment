# -*- coding: utf-8 -*-
"""prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-NDN5S8Ub1GHLJCjfOhJu2YP_i0XQCYO
"""

# Commented out IPython magic to ensure Python compatibility.
# Data Loading and Numerical Operations
import pandas as pd
import numpy as np
# Data Visualizations
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
# Data Resampling
from sklearn.utils import resample
# Data Feature Selection
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
# Data Splitting
from sklearn.model_selection import train_test_split
# Data Scaling
from sklearn.preprocessing import MinMaxScaler
# Data Modeling
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, roc_curve, classification_report
# Hyperparameter Tuning
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import GridSearchCV

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/data_cardiovascular_risk.csv')

print((data["glucose"].mode())[0])

data["glucose"].fillna((data["glucose"].mode())[0], inplace=True)

data["education"].fillna((data["education"].mode())[0], inplace=True)
data["cigsPerDay"].fillna((data["cigsPerDay"].mode())[0], inplace=True)

data["BPMeds"].fillna((data["BPMeds"].mean()), inplace=True)
data["totChol"].fillna((data["totChol"].mean()), inplace=True)
data["BMI"].fillna((data["BMI"].mean()), inplace=True)

data.isnull().sum()

data.dropna(inplace=True)
data.isnull().sum()

data.drop(['id',],axis=1,inplace=True)

features=['totChol', 'sysBP', 'glucose']

def iqr_capping(data, cols, factor):
  for col in cols:
    q1=data[col].quantile(0.25)
    q3=data[col].quantile(0.75)

    iqr=q3-q1

    upper_whisker = q3+(factor*iqr)
    lower_whisker = q1-(factor*iqr)

    data[col] = np.where(data[col]>upper_whisker, upper_whisker, np.where(data[col]<lower_whisker, lower_whisker,data[col]))

iqr_capping(data,features, 1.5)

plt.figure(figsize=(20,10), facecolor='w')
sns.boxplot(data=data)
plt.show()

data = pd.get_dummies(data, columns = ['sex', 'is_smoking'])
print(data)

y = data['TenYearCHD']
X = data.drop(['TenYearCHD'], axis=1)

from imblearn.combine import SMOTEENN
sm = SMOTEENN(sampling_strategy='minority')
X_sm, y_sm = sm.fit_resample(X, y)
y_sm.value_counts()

data=data[['cigsPerDay', 'age', 'sysBP', 'diaBP', 'totChol', 'BMI', 'glucose','TenYearCHD']]
data.head()

X_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size = 0.3, random_state = 0)

from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()
X_train_scaler= scaler.fit_transform(X_train)
X_test_scaler= scaler.fit_transform(X_test)

model=RandomForestClassifier(n_estimators=20)
model.fit(X_train_scaler, y_train)
y_pred= model.predict(X_test_scaler)
p = model.score(X_test_scaler,y_test)
print(p)

print('Classification Report\n', classification_report(y_test, y_pred))
print('Accuracy: {}%\n'.format(round((accuracy_score(y_test, y_pred)*100),2)))

cm = confusion_matrix(y_test, y_pred)
print(cm)

import pickle

filename = 'ca'
pickle.dump(model,open(filename, 'wb'))

loaded_model = pickle.load(open(filename, 'rb'))
loaded_model.predict(X_test)

